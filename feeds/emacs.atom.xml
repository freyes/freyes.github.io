<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>TTY.cl</title><link href="http://tty.cl/" rel="alternate"></link><link href="http://tty.cl//feeds/emacs.atom.xml" rel="self"></link><id>http://tty.cl/</id><updated>2013-12-03T00:00:00-03:00</updated><entry><title>How to start with Emacs</title><link href="http://tty.cl/how-to-start-with-emacs.html" rel="alternate"></link><updated>2013-12-03T00:00:00-03:00</updated><author><name>Felipe Reyes</name></author><id>tag:tty.cl,2013-12-03:how-to-start-with-emacs.html</id><summary type="html">&lt;h2&gt;Part 0&lt;/h2&gt;
&lt;p&gt;Before I could really be productive with emacs, I failed a couple of
times, because I knew that emacs were powerful, but the default
configuration shows you a simple text editor that look awful, without
syntax highlight, without anti-alias, a color schema that really
sucks.&lt;/p&gt;
&lt;p&gt;In GNU/Linux (to not piss off rms xD)I was never found a really nice
(text) editor, because all the available suck at some point (even
emacs sucks sometime, but suck less than the rest :P), so when I met
zeus lead me in the first steps giving me some elisp tips, I could
start swimming by myself and improving my emacs configuration file,
and even teaching some tips to the mentor :P.&lt;/p&gt;
&lt;p&gt;So I will start a series of articles of how to start with emacs,
especially giving the recipes (elisp code) of how to obtain the
desired behavior.&lt;/p&gt;
&lt;h2&gt;Part 1&lt;/h2&gt;
&lt;p&gt;First of all, All my tips related to the underlying Operative System
are using GNU/Linux Debian, so if you are using another distribution
(or even another OS) you will have to look for the appropriate way to
do the task, if you send me how to do it with another OS I will add it
to the entry.&lt;/p&gt;
&lt;h3&gt;What is emacs?&lt;/h3&gt;
&lt;p&gt;Well, emacs doesn't exists, the correct name is GNU Emacs for the
series of post, because there is a lot different flavors of emacs, for
example XEmacs, Aquamacs, and others.&lt;/p&gt;
&lt;p&gt;The GNU Emacs website says:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;GNU Emacs is an extensible, customizable text editorâ€”and more. At
its core is an interpreter for Emacs Lisp, a dialect of the Lisp
programming language with extensions to support text editing.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What can I do with emacs?&lt;/p&gt;
&lt;p&gt;It's a text editor, so write text :P, but also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Develop software in a wide range of compute languages, like C, C++,
  elisp, C#, ruby, python, java, ...&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mail client&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chat with your irc folks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Surf on the web&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And other things that will be discussed in their respectives posts&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Install GNU Emacs&lt;/h3&gt;
&lt;p&gt;First you must decide witch version of emacs do you want to use?,
exists emacs22, which is the current stable release, and also emacs23
(aka emacs-cvs) which is the development version, but currently is in
the state of features freeze, so It's pretty stable to me, if you use
emacs22 you will not have anti-alias, something that is very nice to
the eyes when you spend the day developing, almost all the tips
discussed in the series will be neutral, except the related with
anti-alias and multi-tty.&lt;/p&gt;
&lt;h3&gt;Debian&lt;/h3&gt;
&lt;p&gt;To use emacs22 you can just use the debian official archive and
execute&lt;/p&gt;
&lt;pre&gt;
apt-get install emacs22
&lt;/pre&gt;

&lt;p&gt;But if you want to use the emacs cvs there is a repository maintained
by Romain Francoise of the package emacs-snapshot which is a binary
package of the cvs code (this is the one that I use). To use this repo
you must the following to you source.list (to obtain more details
visit the webpage of the repo)&lt;/p&gt;
&lt;pre&gt;
deb http://emacs.naquadah.org/ unstable/
&lt;/pre&gt;

&lt;p&gt;Then just install the emacs-snapshot package.&lt;/p&gt;
&lt;h2&gt;Part 2&lt;/h2&gt;
&lt;p&gt;Emacs uses a configuration file that is by default placed in your home
directory, the file is called .emacs (I don't know if on win32 systems
is also called .emacs). This file contents is elisp code, so for full
control of emacs it's imperative learn elisp, but I still didn't learn
elisp and I'm an emacs user :), so you can learn elisp while you are
looking for snippets of code.&lt;/p&gt;
&lt;h3&gt;Concepts&lt;/h3&gt;
&lt;p&gt;I will have to explain some concepts that are important to understand
why emacs behave in the way that it does.&lt;/p&gt;
&lt;p&gt;In emacs there are buffers, there is the minibuffer that is where you
type the emacs commands (or elisp interactive functions), and the
other buffers could represent an opened file, a pipe, or just a
temporary editing space that is not attached to a file, the name of
the last type of buffers start and end with &lt;em&gt;, for example &lt;/em&gt;scratch*&lt;/p&gt;
&lt;p&gt;Emacs has something called 'modes', it's something like the way that a
determined buffer must behave, for example if you are going to open C
source code file the c-mode should be loaded, and it will help you in
task of develop with the C language. There are 2 kinds of modes, the
major and minor modes, one buffer can only have one major mode and
zero or more minor modes.&lt;/p&gt;
&lt;h3&gt;First tweaks&lt;/h3&gt;
&lt;p&gt;Emacs is a software with a huge history and tradition, so there are
some things that for somebody that is formed in the last 10 years in
computing terms there some musts that you must have in you emacs
config file, like the transient-mark-mode&lt;/p&gt;
&lt;p&gt;The transient mark mode highlights the selected region of text, by
defaults this is disabled so I recommend you enable it with pasting
the following in your .emacs&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;transient-mark-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fill you name and email to let the modes that need that information
could use, this is done with the following snippet of code&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;user-mail-address&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;homer@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;user-full-name&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Homer J. Simpsons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you like to use Ctrl+g to jump to a line number then you should add
the following code&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="nv"&gt;[&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;control&lt;/span&gt; &lt;span class="nv"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;goto-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One of the sweetest feature that must have a text editor is syntax
highlight, well emacs has this, but disabled by default, with the
following code you will have it enabled always&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;font-lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-font-lock-mode&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I think that this is enough for this entry, the next entries probably
will be more fun to write and read, because i will start talking about
the major modes, one mode per entry, probably the next one will be the
C mode.&lt;/p&gt;
&lt;h2&gt;Emacswiki&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.emacswiki.org/"&gt;Emacswiki&lt;/a&gt; is probably the best source to find emacs-specific tip-n-tricks&lt;/p&gt;
&lt;h2&gt;Initial Configuration&lt;/h2&gt;
&lt;p&gt;Suggested initial configuration:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;;; to debug the .emacs file&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;debug-on-error&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;visible-bell&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; setup the default mode to use&lt;/span&gt;
&lt;span class="c1"&gt;;;Text mode is happier than Fundamental mode ;-)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;default-major-mode&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;text-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; define the mail and name&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;user-mail-address&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foo@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;user-full-name&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Foo Bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; be nice with X clipboard&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;x-select-enable-clipboard&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; use Control+g fot goto-line&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="nv"&gt;[&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;control&lt;/span&gt; &lt;span class="nv"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;goto-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; enable menubar and tool bar&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;menu-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tool-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; turn on font-lock mode&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-font-lock-mode&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;font-lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; enable syntax highlighting&lt;/span&gt;

&lt;span class="c1"&gt;;; simple cut, copy, paste&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="nv"&gt;[f2]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;clipboard-kill-region&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="nv"&gt;[f3]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;clipboard-kill-ring-save&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="nv"&gt;[f4]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;clipboard-yank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="nv"&gt;[end]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;end-of-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="nv"&gt;[home]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;beginning-of-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;;touche del et suppr&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="nv"&gt;[delete]&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;delete-char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;;(dysplay question in &amp;#39;y/n&amp;#39; instead of &amp;#39;yes/no&amp;#39;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;fset&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;yes-or-no-p&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;y-or-n-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; tramp let you open remote files over ssh&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;tramp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;tramp-default-method&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ssh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;;; Prevent Extraneous Tabs&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;setq-default&lt;/span&gt; &lt;span class="nv"&gt;indent-tabs-mode&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>.emacs</title><link href="http://tty.cl/emacs.html" rel="alternate"></link><updated>2013-12-02T00:00:00-03:00</updated><author><name>Felipe Reyes</name></author><id>tag:tty.cl,2013-12-02:emacs.html</id><summary type="html">&lt;p&gt;I hope you enjoy disecting my emacs config :D&lt;/p&gt;
&lt;p&gt;```elisp
;; to debug the .emacs file
(setq debug-on-error nil)&lt;/p&gt;
&lt;p&gt;;; setup the default mode to use
;;Text mode is happier than Fundamental mode ;-)
(setq default-major-mode 'text-mode)&lt;/p&gt;
&lt;p&gt;;; define the mail and name
(setq user-mail-address "your@mail.com")
(setq user-full-name "Your Name")&lt;/p&gt;
&lt;p&gt;;;;;;;;;;;;;,;
;; UI setup ;;
;;;;;;;;;;;;;;
(require 'swbuff)
(require 'linum)
;; setup the tab to 4 spaces width
(setq tab-width 4)&lt;/p&gt;
&lt;p&gt;(if (eq window-system 'x)
    (set-face-attribute 'default nil :font "Consolas-10"))
;; avoid minimize on C-z, but only in X
(if (eq window-system 'x)
    (global-set-key [C-z] nil))&lt;/p&gt;
&lt;p&gt;;; setup default font for mac
(if (eq system-type 'darwin)
    (set-face-attribute 'default nil :font "Consolas-14"))&lt;/p&gt;
&lt;p&gt;(tool-bar-mode -1) ;; turn off toolbar
(scroll-bar-mode -1) ;; turn off scrollbar&lt;/p&gt;
&lt;p&gt;;; Show tabs
(defface extra-whitespace-face
  '((t (:background "dim gray")))
  "Used for tabs and such.")
(defvar my-extra-keywords
  '(("\t" . 'extra-whitespace-face)))&lt;/p&gt;
&lt;p&gt;;; color-theme
(add-to-list 'load-path "~/.emacs.d/elisp/color-theme/")
(require 'color-theme)
;; (require 'color-theme-tango)
;; (color-theme-tango)&lt;/p&gt;
&lt;p&gt;(require 'color-theme-arjen)
(color-theme-arjen)&lt;/p&gt;
&lt;p&gt;(iswitchb-mode 1)
(global-set-key (kbd "&lt;C-tag&gt;")           'swbuff-switch-to-next-buffer)
(global-set-key (kbd "&lt;C-S-iso-lefttab&gt;") 'swbuff-switch-to-previous-buffer)&lt;/p&gt;
&lt;p&gt;;;;;;;;;;;
;; Text ;;
;;;;;;;;;;
(add-hook 'text-mode-hook
          (lambda () (font-lock-add-keywords nil my-extra-keywords)))&lt;/p&gt;
&lt;p&gt;;;;;;;;;;;;;;;;
;; rect-mark ;;
;;;;;;;;;;;;;;;
(require 'rect-mark)
(global-set-key (kbd "C-x r C-SPC") 'rm-set-mark)
(global-set-key (kbd "C-x r C-x")   'rm-exchange-point-and-mark)
(global-set-key (kbd "C-x r C-w")   'rm-kill-region)
(global-set-key (kbd "C-x r M-w")   'rm-kill-ring-save)&lt;/p&gt;
&lt;p&gt;;;;;;;;;;
;; sql ;;
;;;;;;;;;
(add-hook 'sql-mode-hook
           (lambda ()
             (font-lock-add-keywords nil my-extra-keywords)))&lt;/p&gt;
&lt;p&gt;;;;;;;;;;;;;;;
;; Org mode ;;
;;;;;;;;;;;;;;
(load-file "~/.emacs.d/org-mode.el")&lt;/p&gt;
&lt;p&gt;;;;;;;;;;;;;;;;;;;;;
;; remember notes ;;
;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path "~/.emacs.d/elisp/remember-el")&lt;/p&gt;
&lt;p&gt;;; (require 'remember-autoloads)
(autoload 'remember "remember" nil t)
(setq remember-data-file "~/.notes.txt")
(global-set-key (kbd "C-c r") 'remember)&lt;/p&gt;
&lt;p&gt;(defun wicked/remember-review-file ()
  "Open `remember-data-file'."
  (interactive)
  (find-file-other-window remember-data-file))
(global-set-key (kbd "C-c r") 'wicked/remember-review-file)&lt;/p&gt;
&lt;p&gt;;;;;;;;;;;;;;;;
;; yasnippet ;;
;;;;;;;;;;;;;;;
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/snippets/")&lt;/p&gt;
&lt;p&gt;;;;;;;;;;;;;;;;;
;; javascript ;;
;;;;;;;;;;;;;;;;
(autoload 'js2-mode "js2-mode" nil t)
(add-to-list 'auto-mode-alist
             '("\.js$" . js2-mode))&lt;/p&gt;
&lt;p&gt;(add-to-list 'auto-mode-alist
             '("\.dot$" . graphviz-dot-mode))&lt;/p&gt;
&lt;p&gt;;;;;;;;;;;;
;; dired ;;
;;;;;;;;;;;
(require 'dired-x)
(require 'dired-single) ;; http://www.northbound-train.com/emacs/dired-single.el
(defun my-dired-init ()
  "Bunch of stuff to run for dired, either immediately or when it's
         loaded."
  ;; &lt;add other stuff here&gt;
  (define-key dired-mode-map [return] 'dired-single-buffer)
  (define-key dired-mode-map [mouse-1] 'dired-single-buffer-mouse)
  (define-key dired-mode-map "^"
    (function
     (lambda nil (interactive) (dired-single-buffer "..")))))&lt;/p&gt;
&lt;p&gt;;; if dired's already loaded, then the keymap will be bound
(if (boundp 'dired-mode-map)
    ;; we're good to go; just add our bindings
    (my-dired-init)
  ;; it's not loaded yet, so add our bindings to the load-hook
  (add-hook 'dired-load-hook 'my-dired-init))&lt;/p&gt;
&lt;p&gt;(setq dired-omit-files-p t)
(setq-default dired-omit-files-p t) ; this is buffer-local variable
(setq dired-omit-files
      (concat dired-omit-files "*.tsv|\|^\..+$"))&lt;/p&gt;
&lt;p&gt;;;;;;;;;;;
;; yaml ;;
;;;;;;;;;;
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\.yml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\.yaml$" . yaml-mode))&lt;/p&gt;
&lt;p&gt;;;;;;;;;;;;;;;;;
;; multi-term ;;
;;;;;;;;;;;;;;;;
(autoload 'multi-term "multi-term" nil t)
(autoload 'multi-term-next "multi-term" nil t)&lt;/p&gt;
&lt;p&gt;(setq multi-term-program "/bin/bash")   ;; use bash
;; (setq multi-term-program "/bin/zsh") ;; or use zsh...&lt;/p&gt;
&lt;p&gt;;; only needed if you use autopair
;; (add-hook 'term-mode-hook
;;   #'(lambda () (setq autopair-dont-activate t)))&lt;/p&gt;
&lt;p&gt;(global-set-key (kbd "C-c t") 'multi-term-next)
(global-set-key (kbd "C-c T") 'multi-term) ;; create a new one&lt;/p&gt;
&lt;p&gt;;; use Control+g fot goto-line
(global-set-key [(control g)] 'goto-line)&lt;/p&gt;
&lt;p&gt;;;;;;;;;;;;;
;; Python ;;
;;;;;;;;;;;;&lt;/p&gt;
&lt;p&gt;(setq py-python-command "/usr/bin/python")&lt;/p&gt;
&lt;p&gt;(setq auto-mode-alist (cons '("\.py$" . python-mode) auto-mode-alist))
(setq interpreter-mode-alist (cons '("python" . python-mode)
                                   interpreter-mode-alist))
(autoload 'python-mode "python-mode" "Python editing mode." t)&lt;/p&gt;
&lt;p&gt;;; show pydoc
;; http://www.emacswiki.org/cgi-bin/wiki/PythonMode
(defun my-python-documentation (w)
  "Launch PyDOC on the Word at Point"
  (interactive
   (list (let&lt;em&gt; ((word (thing-at-point 'word))
                (input (read-string
                        (format "pydoc entry%s: "
                                (if (not word) "" (format " (default %s)" word))))))
           (if (string= input "")
               (if (not word) (error "No pydoc args given")
                 word) ;sinon word
             input)))) ;sinon input
  (shell-command (concat py-python-command " -c \"from pydoc import help;help(\'" w "\')\"") "&lt;/em&gt;PYDOCS&lt;em&gt;")
  (view-buffer-other-window "&lt;/em&gt;PYDOCS*" t 'kill-buffer-and-window))&lt;/p&gt;
&lt;p&gt;;;to show the pydoc help on the word at point
(add-hook 'python-mode-hook
          (function (lambda ()
                      (local-set-key [(control f1)] 'my-python-documentation)
                      )))&lt;/p&gt;
&lt;p&gt;;;para indentar o completar con tab
(add-hook 'python-mode-hook
          (function (lambda ()
                      (local-set-key (kbd "&lt;tab&gt;") 'indent-or-complete)
                      )))
(add-hook 'python-mode-hook
          (function (lambda ()
                      (local-set-key (kbd "C-x #") 'comment-or-uncomment-region)
                      )))&lt;/p&gt;
&lt;p&gt;;;pdb setup, note the python version
(setq pdb-path '/usr/bin/pdb
      gud-pdb-command-name (symbol-name pdb-path))
(defadvice pdb (before gud-query-cmdline activate)
  "Provide a better default command line when called interactively."
  (interactive
   (list (gud-query-cmdline pdb-path
                            (file-name-nondirectory buffer-file-name)))))&lt;/p&gt;
&lt;p&gt;;; para usar pdb con F8
(add-hook 'python-mode-hook
          (function (lambda ()
                      (local-set-key (kbd "&lt;f8&gt;") 'pdb)
                      )))
;; para usar pydoc
(add-hook 'python-mode-hook
          '(lambda () (eldoc-mode 1)) t)&lt;/p&gt;
&lt;p&gt;;;show tab in python mode
(add-hook 'python-mode-hook
          (lambda ()
            (font-lock-add-keywords nil my-extra-keywords)))&lt;/p&gt;
&lt;p&gt;;; para mostrar el trailing whitespace
(add-hook 'python-mode-hook
          (lambda ()
            (setq show-trailing-whitespace t)))&lt;/p&gt;
&lt;p&gt;;; usar pylint
(when (load "flymake" t)
  (defun flymake-pylint-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
           (local-file (file-relative-name
                        temp-file
                        (file-name-directory buffer-file-name))))
      (list "epylint" (list local-file))))&lt;/p&gt;
&lt;p&gt;(add-to-list 'flymake-allowed-file-name-masks
               '("\.py\'" flymake-pylint-init)))&lt;/p&gt;
&lt;p&gt;;; (require 'pymacs)
;; (require 'pycomplete)
;; (autoload 'pymacs-load "ropemacs" "rope-")
;; (autoload 'pymacs-load "pymacs" nil t)
;; (autoload 'pymacs-eval "pymacs" nil t)
;; (autoload 'pymacs-apply "pymacs")
;; (autoload 'pymacs-call "pymacs")&lt;/p&gt;
&lt;p&gt;;;(rope-init)&lt;/p&gt;
&lt;p&gt;;; para autocompletar los cierres de parentesis o de string
;;(add-hook 'python-mode-hook
;;    (lambda ()
;;      (define-key python-mode-map "\"" 'electric-pair)
;;      (define-key python-mode-map "\'" 'electric-pair)
;;      (define-key python-mode-map "(" 'electric-pair)
;;      (define-key python-mode-map "[" 'electric-pair)
;;      (define-key python-mode-map "{" 'electric-pair)))&lt;/p&gt;
&lt;p&gt;;;(defun electric-pair ()
;;  "Insert character pair without sournding spaces"
;;  (interactive)
;;  (let (parens-require-spaces)
;;    (insert-pair)))&lt;/p&gt;
&lt;p&gt;;;;;;;;;;;
;; djcb ;;
;;;;;;;;;;
(defun djcb-opacity-modify (&amp;amp;optional dec)
  "modify the transparency of the emacs frame; if DEC is t,
    decrease the transparency, otherwise increase it in 10%-steps"
  (let* ((alpha-or-nil (frame-parameter nil 'alpha)) ; nil before setting
         (oldalpha (if alpha-or-nil alpha-or-nil 100))
         (newalpha (if dec (- oldalpha 10) (+ oldalpha 10))))
    (when (and (&amp;gt;= newalpha frame-alpha-lower-limit) (&amp;lt;= newalpha 100))
      (modify-frame-parameters nil (list (cons 'alpha newalpha))))))&lt;/p&gt;
&lt;p&gt;;; C-8 will increase opacity (== decrease transparency)
;; C-9 will decrease opacity (== increase transparency
;; C-0 will returns the state to normal
(global-set-key (kbd "C-8") '(lambda()(interactive)(djcb-opacity-modify)))
(global-set-key (kbd "C-9") '(lambda()(interactive)(djcb-opacity-modify t)))
(global-set-key (kbd "C-0") '(lambda()(interactive)
                               (modify-frame-parameters nil `((alpha . 100)))))&lt;/p&gt;
&lt;p&gt;;;;;;;;;;;;;;;;;;;;;;;
;; Quit this buffer ;;
;;;;;;;;;;;;;;;;;;;;;;
(defun quit-this-buffer ()
  "Exit current buffer by selecting some other buffer."
  (interactive)
  (switch-to-buffer (prog1 (other-buffer (current-buffer))
              (bury-buffer (current-buffer)))))
(global-set-key "\C-cq" 'quit-this-buffer)&lt;/p&gt;
&lt;p&gt;;;-&amp;gt; backspace on a selected region -&amp;gt; deletion
(delete-selection-mode t)&lt;/p&gt;
&lt;p&gt;;;scroll line per line (1 line instead of 3)
(setq scroll-step 1)&lt;/p&gt;
&lt;p&gt;;;display line and column number in toolbar
(setq line-number-mode t)
(setq column-number-mode t)&lt;/p&gt;
&lt;p&gt;;;show_paren mode
(show-paren-mode t)&lt;/p&gt;
&lt;p&gt;;; display clock
(display-time)&lt;/p&gt;
&lt;p&gt;;; Use visible beel instead of beep
(setq visible-bell 't)&lt;/p&gt;
&lt;p&gt;;;(dysplay question in 'y/n' instead of 'yes/no')
(fset 'yes-or-no-p 'y-or-n-p)&lt;/p&gt;
&lt;p&gt;;; Save all my backup files in a specific directory
;(defun make-backup-file-name (file)
;  (concat "~/.autosave/" (file-name-nondirectory file)))
(setq backup-directory-alist
      &lt;code&gt;((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms&lt;/code&gt;((".*" ,temporary-file-directory t)))
(windmove-default-keybindings)&lt;/p&gt;
&lt;p&gt;(setq tramp-default-method "ssh")&lt;/p&gt;
&lt;p&gt;(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)&lt;/p&gt;
&lt;p&gt;;;; Prevent Extraneous Tabs
(setq-default indent-tabs-mode nil)
```&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic Configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```
;; to debug the .emacs file
(setq debug-on-error nil)&lt;/p&gt;
&lt;p&gt;;; setup the default mode to use
;;Text mode is happier than Fundamental mode ;-)
(setq default-major-mode 'text-mode)&lt;/p&gt;
&lt;p&gt;;; define the mail and name
(setq user-mail-address "foobar@example.com")
(setq user-full-name "Foo Bar")&lt;/p&gt;
&lt;p&gt;;; define the ispell dictionary to use
(setq ispell-dictionary "en")&lt;/p&gt;
&lt;p&gt;;; setup the tab to 4 spaces width
(setq tab-width 4)&lt;/p&gt;
&lt;p&gt;(tool-bar-mode -1) ;; turn off toolbar
(scroll-bar-mode -1) ;; turn off scrollbar&lt;/p&gt;
&lt;p&gt;;; color-theme
;; http://www.emacswiki.org/emacs/ColorTheme
;; http://www.nongnu.org/color-theme
(add-to-list 'load-path "~/.emacs.d/elisp/color-theme/")
(require 'color-theme)
(require 'color-theme-arjen)
(color-theme-arjen)&lt;/p&gt;
&lt;p&gt;;; http://www.emacswiki.org/emacs/SwBuff
(require 'swbuff)
(global-set-key [(control tab)]       'swbuff-switch-to-next-buffer)
(global-set-key (kbd "&lt;C-S-iso-lefttab&gt;") 'swbuff-switch-to-previous-buffer)&lt;/p&gt;
&lt;p&gt;(require 'whitespace)
(setq whitespace-style '(face empty tabs lines-tail trailing))
(add-hook 'python-mode-hook 'whitespace-mode)&lt;/p&gt;
&lt;p&gt;;; Show tabs
(defface extra-whitespace-face
  '((t (:background "dim gray")))
  "Used for tabs and such.")
(defvar my-extra-keywords
  '(("\t" . 'extra-whitespace-face)))&lt;/p&gt;
&lt;p&gt;(add-hook 'text-mode-hook
          (lambda () (font-lock-add-keywords nil my-extra-keywords)))&lt;/p&gt;
&lt;p&gt;;; http://www.emacswiki.org/emacs/RectangleMark
(require 'rect-mark)
(global-set-key (kbd "C-x r C-SPC") 'rm-set-mark)
(global-set-key (kbd "C-x r C-x")   'rm-exchange-point-and-mark)
(global-set-key (kbd "C-x r C-w")   'rm-kill-region)
(global-set-key (kbd "C-x r M-w")   'rm-kill-ring-save)
```&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```
;;;;;;;;;;;;
;; Python ;;
;;;;;;;;;;;;&lt;/p&gt;
&lt;p&gt;(setq py-python-command "/usr/bin/python")&lt;/p&gt;
&lt;p&gt;(setq auto-mode-alist (cons '("\.py$" . python-mode) auto-mode-alist))
(setq interpreter-mode-alist (cons '("python" . python-mode)
                                   interpreter-mode-alist))
(autoload 'python-mode "python-mode" "Python editing mode." t)&lt;/p&gt;
&lt;p&gt;;; show pydoc
;; http://www.emacswiki.org/cgi-bin/wiki/PythonMode
(defun my-python-documentation (w)
  "Launch PyDOC on the Word at Point"
  (interactive
   (list (let&lt;em&gt; ((word (thing-at-point 'word))
                (input (read-string
                        (format "pydoc entry%s: "
                                (if (not word) "" (format " (default %s)" word))))))
           (if (string= input "")
               (if (not word) (error "No pydoc args given")
                 word) ;sinon word
             input)))) ;sinon input
  (shell-command (concat py-python-command " -c \"from pydoc import help;help(\'" w "\')\"") "&lt;/em&gt;PYDOCS&lt;em&gt;")
  (view-buffer-other-window "&lt;/em&gt;PYDOCS*" t 'kill-buffer-and-window))&lt;/p&gt;
&lt;p&gt;;;to show the pydoc help on the word at point
(add-hook 'python-mode-hook
          (function (lambda ()
                      (local-set-key [(control f1)] 'my-python-documentation)
                      )))&lt;/p&gt;
&lt;p&gt;;;para indentar o completar con tab
(add-hook 'python-mode-hook
          (function (lambda ()
                      (local-set-key (kbd "&lt;tab&gt;") 'indent-or-complete)
                      )))
(add-hook 'python-mode-hook
          (function (lambda ()
                      (local-set-key (kbd "C-x #") 'comment-or-uncomment-region)
                      )))&lt;/p&gt;
&lt;p&gt;;;pdb setup, note the python version
(setq pdb-path '/usr/bin/pdb
      gud-pdb-command-name (symbol-name pdb-path))
(defadvice pdb (before gud-query-cmdline activate)
  "Provide a better default command line when called interactively."
  (interactive
   (list (gud-query-cmdline pdb-path
                            (file-name-nondirectory buffer-file-name)))))&lt;/p&gt;
&lt;p&gt;;; para usar pdb con F8
(add-hook 'python-mode-hook
          (function (lambda ()
                      (local-set-key (kbd "&lt;f8&gt;") 'pdb)
                      )))
;; para usar pydoc
(add-hook 'python-mode-hook
          '(lambda () (eldoc-mode 1)) t)&lt;/p&gt;
&lt;p&gt;;;show tab in python mode
(add-hook 'python-mode-hook
          (lambda ()
            (font-lock-add-keywords nil my-extra-keywords)))&lt;/p&gt;
&lt;p&gt;;; para mostrar el trailing whitespace
(add-hook 'python-mode-hook
          (lambda ()
            (setq show-trailing-whitespace t)))&lt;/p&gt;
&lt;p&gt;;; usar pylint
(when (load "flymake" t)
  (defun flymake-pylint-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
           (local-file (file-relative-name
                        temp-file
                        (file-name-directory buffer-file-name))))
      (list "epylint" (list local-file))))&lt;/p&gt;
&lt;p&gt;(add-to-list 'flymake-allowed-file-name-masks
               '("\.py\'" flymake-pylint-init)))&lt;/p&gt;
&lt;p&gt;;; (require 'pymacs)
;; (require 'pycomplete)
;; (autoload 'pymacs-load "ropemacs" "rope-")
;; (autoload 'pymacs-load "pymacs" nil t)
;; (autoload 'pymacs-eval "pymacs" nil t)
;; (autoload 'pymacs-apply "pymacs")
;; (autoload 'pymacs-call "pymacs")&lt;/p&gt;
&lt;p&gt;;;(rope-init)&lt;/p&gt;
&lt;p&gt;;; para autocompletar los cierres de parentesis o de string
;;(add-hook 'python-mode-hook
;;    (lambda ()
;;      (define-key python-mode-map "\"" 'electric-pair)
;;      (define-key python-mode-map "\'" 'electric-pair)
;;      (define-key python-mode-map "(" 'electric-pair)
;;      (define-key python-mode-map "[" 'electric-pair)
;;      (define-key python-mode-map "{" 'electric-pair)))&lt;/p&gt;
&lt;p&gt;;;(defun electric-pair ()
;;  "Insert character pair without sournding spaces"
;;  (interactive)
;;  (let (parens-require-spaces)
;;    (insert-pair)))
```&lt;/p&gt;</summary></entry><entry><title>erc</title><link href="http://tty.cl/erc.html" rel="alternate"></link><updated>2013-12-02T00:00:00-03:00</updated><author><name>Felipe Reyes</name></author><id>tag:tty.cl,2013-12-02:erc.html</id><summary type="html">&lt;p&gt;This is my configuration for erc&lt;/p&gt;
&lt;p&gt;erc-cmd-NP function send the current track being played to the current chat buffer (channel or private).&lt;/p&gt;
&lt;p&gt;The connect- functions provide a quick access to the defined IRC server.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;;;&lt;/span&gt;
&lt;span class="c1"&gt;;; erc.el&lt;/span&gt;
&lt;span class="c1"&gt;;; Login : &amp;lt;freyes@wampa&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;;; Started on  Mon Aug 30 23:04:16 2010 Felipe Reyes&lt;/span&gt;
&lt;span class="c1"&gt;;; $Id$&lt;/span&gt;
&lt;span class="c1"&gt;;; &lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;erc-cmd-NP&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&amp;amp;rest&lt;/span&gt; &lt;span class="k"&gt;ignore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Display the current EMMS track to the current ERC buffer.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;emms-show&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;string&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;erc-send-message&lt;/span&gt; &lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Nothing is playing!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;connect-freenode&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;erc&lt;/span&gt;
   &lt;span class="ss"&gt;:server&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;irc.freenode.net&amp;quot;&lt;/span&gt;
   &lt;span class="ss"&gt;:port&lt;/span&gt; &lt;span class="mi"&gt;6667&lt;/span&gt;
   &lt;span class="ss"&gt;:nick&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;freyes&amp;quot;&lt;/span&gt;
   &lt;span class="ss"&gt;:password&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;XXXXXX&amp;quot;&lt;/span&gt;
   &lt;span class="ss"&gt;:full-name&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Felipe Reyes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;connect-gnome&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;erc&lt;/span&gt;
   &lt;span class="ss"&gt;:server&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;irc.gnome.org&amp;quot;&lt;/span&gt;
   &lt;span class="ss"&gt;:port&lt;/span&gt; &lt;span class="mi"&gt;6667&lt;/span&gt;
   &lt;span class="ss"&gt;:nick&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;freyes&amp;quot;&lt;/span&gt;
   &lt;span class="ss"&gt;:password&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;XXXXX&amp;quot;&lt;/span&gt;
   &lt;span class="ss"&gt;:full-name&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Felipe Reyes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;connect-oftc&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;erc&lt;/span&gt;
   &lt;span class="ss"&gt;:server&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;irc.oftc.net&amp;quot;&lt;/span&gt;
   &lt;span class="ss"&gt;:port&lt;/span&gt; &lt;span class="mi"&gt;6667&lt;/span&gt;
   &lt;span class="ss"&gt;:nick&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;freyes&amp;quot;&lt;/span&gt;
   &lt;span class="ss"&gt;:password&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;XXXXXX&amp;quot;&lt;/span&gt;
   &lt;span class="ss"&gt;:full-name&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Felipe Reyes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;erc-auto-query&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Org-mode and Beamer</title><link href="http://tty.cl/org-mode-and-beamer.html" rel="alternate"></link><updated>2013-12-02T00:00:00-03:00</updated><author><name>Felipe Reyes</name></author><id>tag:tty.cl,2013-12-02:org-mode-and-beamer.html</id><summary type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The LaTeX class beamer allows production of high quality presentations using LaTeX and pdf processing. Org-mode has special support for turning an Org-mode file or tree into a beamer presentation. &lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Here it is an example of how a presentation file should look like&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#+TITLE:     Org Mode and Beamer&lt;/span&gt;
&lt;span class="c"&gt;#+AUTHOR:    Felipe Reyes&lt;/span&gt;
&lt;span class="c"&gt;#+EMAIL:     freyes@tty.cl&lt;/span&gt;
&lt;span class="c"&gt;#+DATE:      2011-08-25 Tue&lt;/span&gt;
&lt;span class="c"&gt;#+DESCRIPTION:&lt;/span&gt;
&lt;span class="c"&gt;#+KEYWORDS:  org-mode, beamer, tutorial&lt;/span&gt;
&lt;span class="c"&gt;#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t &amp;lt;:t&lt;/span&gt;
&lt;span class="c"&gt;#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc&lt;/span&gt;
&lt;span class="c"&gt;#+INFOJS_OPT: view:nil toc:nil ltoc:nil mouse:underline buttons:0 path:http://orgmode.org/org-info.js&lt;/span&gt;
&lt;span class="c"&gt;#+EXPORT_SELECT_TAGS: export&lt;/span&gt;
&lt;span class="c"&gt;#+EXPORT_EXCLUDE_TAGS: noexport&lt;/span&gt;
&lt;span class="c"&gt;#+LINK_UP:   &lt;/span&gt;
&lt;span class="c"&gt;#+LINK_HOME: &lt;/span&gt;
&lt;span class="c"&gt;#+LaTeX_CLASS: beamer&lt;/span&gt;
&lt;span class="c"&gt;#+BEAMER_HEADER_EXTRA: \usetheme{Madrid}\usecolortheme{default}&lt;/span&gt;
&lt;span class="c"&gt;#+MACRO: BEAMERMODE presentation&lt;/span&gt;
&lt;span class="c"&gt;#+MACRO: BEAMERINSTITUTE tty.cl&lt;/span&gt;
&lt;span class="c"&gt;#+BEAMER_FRAME_LEVEL: 2&lt;/span&gt;
&lt;span class="c"&gt;#+STARTUP: beamer&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Org&lt;/span&gt; &lt;span class="n"&gt;Mode&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Beamer&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;Overview&lt;/span&gt;
   &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;bullet&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;nested&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;
   &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Resume&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;Numbered&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;
   &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;
   &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;three&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;Source&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;Example&lt;/span&gt;
&lt;span class="c"&gt;#+BEGIN_LaTeX&lt;/span&gt;
\&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;lstlisting&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
\&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;lstlisting&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;#+END_LaTeX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's review it by section&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First you just need to set the basic information about your presentation (title, author, email, date, description and keywords)&lt;/li&gt;
&lt;li&gt;Then you indicate if you want some extra options in each slide&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BEAMER_HEADER_EXTRA&lt;/code&gt;: include raw LaTeX statements, this is used to define the beamer's theme, in this case we are using the theme &lt;em&gt;Madrid&lt;/em&gt; with the &lt;em&gt;default&lt;/em&gt; color theme.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BEAMERMODE&lt;/code&gt;: set the presentation mode in beamer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BEAMERINSTITUTE&lt;/code&gt;: let you define your college, business, etc.&lt;/li&gt;
&lt;li&gt;At the end we just write our slides, each level 2 section is a slide.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can open the file [[file:org-mode.beamer.presentation.org]] in emacs and use the shortcut &lt;code&gt;C-c C-e p&lt;/code&gt; to generate a pdf of the presentation. The produced pdf can be downloaded [[file:org-mode.beamer.presentation.pdf][here]]&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Execute the following command in Debian or Ubuntu&lt;/p&gt;
&lt;pre&gt;
sudo apt-get install texlive-extra-utils \
    texlive-binaries \
    latex-beamer \
    texlive-latex-extra
&lt;/pre&gt;

&lt;p&gt;Add the following to your &lt;em&gt;.emacs&lt;/em&gt; file:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;;; beamer&lt;/span&gt;
&lt;span class="c1"&gt;;; #+LaTeX_CLASS: beamer in org files&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;boundp&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;org-export-latex-classes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-export-latex-classes&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;org-export-latex-classes&lt;/span&gt;
  &lt;span class="c1"&gt;;; beamer class, for presentations&lt;/span&gt;
  &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;beamer&amp;quot;&lt;/span&gt;
     &lt;span class="s"&gt;&amp;quot;\\documentclass[11pt]{beamer}\n&lt;/span&gt;
&lt;span class="s"&gt;      \\mode&amp;lt;{{{beamermode}}}&amp;gt;\n&lt;/span&gt;
&lt;span class="s"&gt;      \\beamertemplateballitem\n&lt;/span&gt;
&lt;span class="s"&gt;      \\setbeameroption{show notes}&lt;/span&gt;
&lt;span class="s"&gt;      \\usepackage[utf8]{inputenc}\n&lt;/span&gt;
&lt;span class="s"&gt;      \\usepackage[T1]{fontenc}\n&lt;/span&gt;
&lt;span class="s"&gt;      \\usepackage{hyperref}\n&lt;/span&gt;
&lt;span class="s"&gt;      \\usepackage{color}&lt;/span&gt;
&lt;span class="s"&gt;      \\usepackage{listings}&lt;/span&gt;
&lt;span class="s"&gt;      \\lstset{numbers=none,language=[ISO]C++,tabsize=4,&lt;/span&gt;
&lt;span class="s"&gt;  frame=single,&lt;/span&gt;
&lt;span class="s"&gt;  basicstyle=\\small,&lt;/span&gt;
&lt;span class="s"&gt;  showspaces=false,showstringspaces=false,&lt;/span&gt;
&lt;span class="s"&gt;  showtabs=false,&lt;/span&gt;
&lt;span class="s"&gt;  keywordstyle=\\color{blue}\\bfseries,&lt;/span&gt;
&lt;span class="s"&gt;  commentstyle=\\color{red},&lt;/span&gt;
&lt;span class="s"&gt;  }\n&lt;/span&gt;
&lt;span class="s"&gt;      \\usepackage{verbatim}\n&lt;/span&gt;
&lt;span class="s"&gt;      \\institute{{{{beamerinstitute}}}}\n          &lt;/span&gt;
&lt;span class="s"&gt;       \\subject{{{{beamersubject}}}}\n&amp;quot;&lt;/span&gt;

     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\\section{%s}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\\section*{%s}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\\begin{frame}[fragile]\\frametitle{%s}&amp;quot;&lt;/span&gt;
       &lt;span class="s"&gt;&amp;quot;\\end{frame}&amp;quot;&lt;/span&gt;
       &lt;span class="s"&gt;&amp;quot;\\begin{frame}[fragile]\\frametitle{%s}&amp;quot;&lt;/span&gt;
       &lt;span class="s"&gt;&amp;quot;\\end{frame}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;;; letter class, for formal letters&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;org-export-latex-classes&lt;/span&gt;
  &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;letter&amp;quot;&lt;/span&gt;
     &lt;span class="s"&gt;&amp;quot;\\documentclass[11pt]{letter}\n&lt;/span&gt;
&lt;span class="s"&gt;      \\usepackage[utf8]{inputenc}\n&lt;/span&gt;
&lt;span class="s"&gt;      \\usepackage[T1]{fontenc}\n&lt;/span&gt;
&lt;span class="s"&gt;      \\usepackage{color}&amp;quot;&lt;/span&gt;

     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\\section{%s}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\\section*{%s}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\\subsection{%s}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\\subsection*{%s}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\\subsubsection{%s}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\\subsubsection*{%s}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\\paragraph{%s}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\\paragraph*{%s}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\\subparagraph{%s}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\\subparagraph*{%s}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/rivanvx/beamer/wiki/Home"&gt;Beamer development repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://orgmode.org/worg/org-tutorials/org-beamer/tutorial.html"&gt;Worg beamer tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://orgmode.org/manual/Beamer-class-export.html"&gt;org-mode beamer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emacs-fu.blogspot.com/2009/10/writing-presentations-with-org-mode-and.html"&gt;emacs-fu: writing presentations with org-mode and beamer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Emacs Tips</title><link href="http://tty.cl/emacs-tips.html" rel="alternate"></link><updated>2013-01-01T00:00:00-03:00</updated><author><name>Felipe Reyes</name></author><id>tag:tty.cl,2013-01-01:emacs-tips.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;If you start emacs with "emacs -q" and the problem goes away, the problem is on your end: check your .emacs. &lt;/li&gt;
&lt;li&gt;If "emacs -q" has problems and "emacs -Q" does not, it's caused by your distro or local admin.&lt;/li&gt;
&lt;/ul&gt;</summary></entry></feed>