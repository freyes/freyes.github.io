<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>TTY.cl - development</title><link href="http://tty.cl/" rel="alternate"></link><link href="http://tty.cl//feeds/tags/development.atom.xml" rel="self"></link><id>http://tty.cl/</id><updated>2014-02-24T00:00:00-03:00</updated><entry><title>Deploy a Python WSGI app with a Celery worker in Heroku</title><link href="http://tty.cl/deploy-a-python-wsgi-app-with-a-celery-worker-in-heroku.html" rel="alternate"></link><published>2014-02-24T00:00:00-03:00</published><updated>2014-02-24T00:00:00-03:00</updated><author><name>Felipe Reyes</name></author><id>tag:tty.cl,2014-02-24:/deploy-a-python-wsgi-app-with-a-celery-worker-in-heroku.html</id><summary type="html">&lt;p&gt;This article explains how to deploy a WSGI python web app + a
&lt;a href="http://www.celeryproject.org"&gt;celery&lt;/a&gt; worker.&lt;/p&gt;
&lt;p&gt;A recommended reading before moving forward with Heroku is
&lt;a href="https://devcenter.heroku.com/articles/process-model"&gt;The Process Model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Jimsy" src="/images/jimsy.png"&gt;&lt;/p&gt;
&lt;h1&gt;The Application&lt;/h1&gt;
&lt;p&gt;The application that we are going to deploy to heroku has the following components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WSGI App, it can be a &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; or â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This article explains how to deploy a WSGI python web app + a
&lt;a href="http://www.celeryproject.org"&gt;celery&lt;/a&gt; worker.&lt;/p&gt;
&lt;p&gt;A recommended reading before moving forward with Heroku is
&lt;a href="https://devcenter.heroku.com/articles/process-model"&gt;The Process Model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Jimsy" src="/images/jimsy.png"&gt;&lt;/p&gt;
&lt;h1&gt;The Application&lt;/h1&gt;
&lt;p&gt;The application that we are going to deploy to heroku has the following components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WSGI App, it can be a &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; or
  &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; application, the important part is that you
  provide a WSGI app as entry point.&lt;/li&gt;
&lt;li&gt;Celery, we will be using a Celery worker to run background tasks, for
  example image resizing.&lt;/li&gt;
&lt;li&gt;Database, well ... you know, we usually want to save data permanently.&lt;/li&gt;
&lt;li&gt;RabbitMQ as message broker.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;The &lt;code&gt;Procfile&lt;/code&gt;!&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Procfile&lt;/code&gt; let the developer declare the commands each dyno has to run,
there are several process' types:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Process Type&lt;/th&gt;
&lt;th&gt;Command Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;web&lt;/td&gt;
&lt;td&gt;gunicorn app.wsgi -b 0.0.0.0:$PORT --debug&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;worker&lt;/td&gt;
&lt;td&gt;celery -A tasks worker --loglevel=info --concurrency=1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://devcenter.heroku.com/articles/scheduled-jobs-custom-clock-processes"&gt;clock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;python foo.py&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This file is the key part to instruct Heroku what to run, for the WSGI app
we'll use a &lt;code&gt;web&lt;/code&gt; process and to run the celery worker daemon we use a
&lt;code&gt;worker&lt;/code&gt; process. Each of these processes will scale independently according
to your configuration (see
&lt;a href="https://devcenter.heroku.com/articles/scaling"&gt;Scaling Your Dyno Formation&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For our application we are going to use the following &lt;code&gt;Procfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
web: gunicorn app.wsgi -b 0.0.0.0:$PORT --debug
worker: celery -A app.tasks worker --loglevel=info --concurrency=1
&lt;/pre&gt;

&lt;h2&gt;Testing your &lt;code&gt;Procfile&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;One of the nice things about the &lt;code&gt;Procfile&lt;/code&gt; is that can be interpreted by
&lt;a href="http://theforeman.org/"&gt;Foreman&lt;/a&gt;, so you can test your configuration running
the following command:&lt;/p&gt;
&lt;pre&gt;
$ foreman start
17:43:11 web.1    | started with pid 31923
17:43:11 worker.1 | started with pid 31926
17:43:12 web.1    | 2014-02-19 17:43:12 [31925] [INFO] Starting gunicorn 18.0
17:43:12 web.1    | 2014-02-19 17:43:12 [31925] [INFO] Listening at: http://0.0.0.0:5000 (31925)
17:43:12 web.1    | 2014-02-19 17:43:12 [31925] [INFO] Using worker: sync
17:43:12 web.1    | 2014-02-19 17:43:12 [31938] [INFO] Booting worker with pid: 31938
17:43:14 worker.1 | [2014-02-19 17:43:14,119: WARNING/MainProcess] /home/freyes/.virtualenvs/django-todo/local/lib/python2.7/site-packages/celery/apps/worker.py:161: CDeprecationWarning: 
17:43:14 worker.1 | Starting from version 3.2 Celery will refuse to accept pickle by default.
17:43:14 worker.1 | 
17:43:14 worker.1 | The pickle serializer is a security concern as it may give attackers
17:43:14 worker.1 | the ability to execute any command.  It's important to secure
17:43:14 worker.1 | your broker from unauthorized access when using pickle, so we think
17:43:14 worker.1 | that enabling pickle should require a deliberate action and not be
17:43:14 worker.1 | the default choice.
17:43:14 worker.1 | 
17:43:14 worker.1 | If you depend on pickle then you should set a setting to disable this
17:43:14 worker.1 | warning and to be sure that everything will continue working
17:43:14 worker.1 | when you upgrade to Celery 3.2::
17:43:14 worker.1 | 
17:43:14 worker.1 |     CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']
17:43:14 worker.1 | 
17:43:14 worker.1 | You must only enable the serializers that you will actually use.
17:43:14 worker.1 | 
17:43:14 worker.1 | 
17:43:14 worker.1 |   warnings.warn(CDeprecationWarning(W_PICKLE_DEPRECATED))
17:43:15 web.1    | 2014-02-19 17:43:15 [31925] [INFO] Handling signal: winch
17:43:15 web.1    | 2014-02-19 17:43:15 [31925] [INFO] SIGWINCH ignored. Not daemonized
17:43:16 worker.1 | [2014-02-19 17:43:16,683: INFO/MainProcess] Connected to amqp://guest@127.0.0.1:5672//
17:43:17 worker.1 | [2014-02-19 17:43:17,323: INFO/MainProcess] mingle: searching for neighbors
17:43:19 worker.1 | [2014-02-19 17:43:19,151: INFO/MainProcess] mingle: all alone
17:43:19 worker.1 | [2014-02-19 17:43:19,750: WARNING/MainProcess] celery@tiefighter ready.
&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;foreman start&lt;/code&gt; works, then your &lt;code&gt;Procfile&lt;/code&gt; is OK.&lt;/p&gt;
&lt;h1&gt;Create the app&lt;/h1&gt;
&lt;p&gt;Once you have configured the &lt;code&gt;Profile&lt;/code&gt; we'll create an application in Heroku
(remember to install &lt;a href="https://toolbelt.heroku.com/"&gt;heroku-toolbelt&lt;/a&gt;) running
&lt;code&gt;heroku create&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example output:&lt;/p&gt;
&lt;pre&gt;
$ heroku create
Creating murmuring-ravine-4093... done, stack is cedar
http://murmuring-ravine-4093.herokuapp.com/ | git@heroku.com:murmuring-ravine-4093.git
&lt;/pre&gt;

&lt;p&gt;This command creates a new heroku app and it adds a new remote to push your code.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.git/config&lt;/code&gt; example:&lt;/p&gt;
&lt;pre&gt;
[remote "heroku"]
    url = git@heroku.com:desolate-fortress-2758.git
    fetch = +refs/heads/*:refs/remotes/heroku/*
&lt;/pre&gt;

&lt;h1&gt;Adding a Database&lt;/h1&gt;
&lt;p&gt;Heroku provides databases via addons, there are several providers, but for
this article we are going to use
&lt;a href="https://addons.heroku.com/heroku-postgresql"&gt;heroku-postgres&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To add it to the recently created application run &lt;code&gt;heroku addons:add
heroku-postgresql&lt;/code&gt;. Here is an example output:&lt;/p&gt;
&lt;pre&gt;
$ heroku addons:add heroku-postgresql
Adding heroku-postgresql on murmuring-ravine-4093... done, v3 (free)
Attached as HEROKU_POSTGRESQL_YELLOW_URL
Database has been created and is available
 ! This database is empty. If upgrading, you can transfer
 ! data from another database with pgbackups:restore.
Use `heroku addons:docs heroku-postgresql` to view documentation.
&lt;/pre&gt;

&lt;h1&gt;Adding RabbitMQ&lt;/h1&gt;
&lt;p&gt;We are using RabbitMQ as message broker for Celery, for this I choose to use
&lt;a href="https://addons.heroku.com/cloudamqp"&gt;CloudAMQP&lt;/a&gt;, to add it to your app run
&lt;code&gt;heroku addons:add cloudamqp&lt;/code&gt;. Here is an example output:&lt;/p&gt;
&lt;pre&gt;
$ heroku addons:add cloudamqp
Adding cloudamqp on murmuring-ravine-4093... done, v4 (free)
Use `heroku addons:docs cloudamqp` to view documentation.
&lt;/pre&gt;

&lt;h1&gt;Adjusting Settings&lt;/h1&gt;
&lt;p&gt;Heroku passes to your app environment variables with the configuration, this a common practice in the PaaS ecosystem, so you need to modify your app to read config values from it.&lt;/p&gt;
&lt;p&gt;Here are examples to setup Celery and Django:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dj_database_url&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_AMQP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;amqp://guest:guest@localhost//&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_DB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;postgres://localhost&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;db_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DATABASE_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_DB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Django settings&lt;/span&gt;
&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dj_database_url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_DB&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;

&lt;span class="c1"&gt;# Celery app configuration&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tasks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db_url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;postgres://&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;db+postgresql://&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CLOUDAMQP_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_AMQP&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BROKER_POOL_LIMIT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Launch the app!&lt;/h1&gt;
&lt;p&gt;Now we have everything configured, it's time to launch push our code and let Heroku do the magic running &lt;code&gt;git push heroku master&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;
$ git push heroku master 
Initializing repository, done.
Counting objects: 365, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (148/148), done.
Writing objects: 100% (365/365), 39.08 KiB | 0 bytes/s, done.
Total 365 (delta 206), reused 319 (delta 185)

-----&gt; Python app detected
-----&gt; No runtime.txt provided; assuming python-2.7.6.
-----&gt; Preparing Python runtime (python-2.7.6)
-----&gt; Installing Setuptools (2.1)
-----&gt; Installing Pip (1.5.2)
-----&gt; Installing dependencies using Pip (1.5.2)
       Downloading/unpacking Django==1.5.5 (from -r requirements.txt (line 1))
         Running setup.py (path:/tmp/pip_build_u26118/Django/setup.py) egg_info for package Django

       Downloading/unpacking dj-database-url==0.2.1 (from -r requirements.txt (line 2))
         Downloading dj-database-url-0.2.1.tar.gz
         Running setup.py (path:/tmp/pip_build_u26118/dj-database-url/setup.py) egg_info for package dj-database-url

       Downloading/unpacking django-extensions==0.9 (from -r requirements.txt (line 3))
         Running setup.py (path:/tmp/pip_build_u26118/django-extensions/setup.py) egg_info for package django-extensions
[...SNIP...]
         Running setup.py install for pytz

           warning: no files found matching '*.pot' under directory 'pytz'
         Running setup.py install for billiard
           building '_billiard' extension
           gcc -pthread -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -DHAVE_SEM_OPEN=1 -DHAVE_FD_TRANSFER=1 -DHAVE_SEM_TIMEDWAIT=1 -IModules/_billiard -I/app/.heroku/python/include/python2.7 -c Modules/_billiard/multiprocessing.c -o build/temp.linux-x86_64-2.7/Modules/_billiard/multiprocessing.o
           gcc -pthread -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -DHAVE_SEM_OPEN=1 -DHAVE_FD_TRANSFER=1 -DHAVE_SEM_TIMEDWAIT=1 -IModules/_billiard -I/app/.heroku/python/include/python2.7 -c Modules/_billiard/socket_connection.c -o build/temp.linux-x86_64-2.7/Modules/_billiard/socket_connection.o
           gcc -pthread -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -DHAVE_SEM_OPEN=1 -DHAVE_FD_TRANSFER=1 -DHAVE_SEM_TIMEDWAIT=1 -IModules/_billiard -I/app/.heroku/python/include/python2.7 -c Modules/_billiard/semaphore.c -o build/temp.linux-x86_64-2.7/Modules/_billiard/semaphore.o
           gcc -pthread -shared build/temp.linux-x86_64-2.7/Modules/_billiard/multiprocessing.o build/temp.linux-x86_64-2.7/Modules/_billiard/socket_connection.o build/temp.linux-x86_64-2.7/Modules/_billiard/semaphore.o -lrt -o build/lib.linux-x86_64-2.7/_billiard.so

           warning: no files found matching '*.py' under directory 'Lib'
         Running setup.py install for anyjson

       Successfully installed Django dj-database-url django-extensions django-respite django-widget-tweaks gunicorn ipdb ipython psycopg2 readline dj-static static Celery SQLAlchemy pystache kombu pytz billiard amqp anyjson
       Cleaning up...
-----&gt; Collecting static files
       /app/.heroku/python/lib/python2.7/site-packages/django/conf/urls/defaults.py:3: DeprecationWarning: django.conf.urls.defaults is deprecated; use django.conf.urls instead
       0 static files copied.

-----&gt; Discovering process types
       Procfile declares types -&gt; web, worker

-----&gt; Compressing... done, 44.2MB
-----&gt; Launching... done, v6
       http://murmuring-ravine-4093.herokuapp.com deployed to Heroku

To git@heroku.com:murmuring-ravine-4093.git
 * [new branch]      master -&gt; master
 &lt;/pre&gt;

&lt;h1&gt;Initialize the Database&lt;/h1&gt;
&lt;p&gt;We have our app running ... but the database wasn't initialized. We are using
Django in this example and we are going to run &lt;code&gt;python manage.py syncdb
--noinput&lt;/code&gt;, but for other frameworks you just replace the command with the
one you use to initialize/bootstrap the database.&lt;/p&gt;
&lt;pre&gt;
$ heroku run python manage.py syncdb --noinput
Running `python manage.py syncdb --noinput` attached to terminal... up, run.5257
/app/.heroku/python/lib/python2.7/site-packages/django/conf/urls/defaults.py:3: DeprecationWarning: django.conf.urls.defaults is deprecated; use django.conf.urls instead
  DeprecationWarning)

Creating tables ...
Creating table auth_permission
Creating table auth_group_permissions
Creating table auth_group
Creating table auth_user_groups
Creating table auth_user_user_permissions
Creating table auth_user
Creating table django_content_type
Creating table django_session
Creating table django_site
Creating table tasks_task
Installing custom SQL ...
Installing indexes ...
Installed 0 object(s) from 0 fixture(s)
&lt;/pre&gt;

&lt;p&gt;And now we are ready to take a look to our app running &lt;code&gt;heroku open&lt;/code&gt; which will open your browser pointing to your app.&lt;/p&gt;
&lt;h1&gt;What now?&lt;/h1&gt;
&lt;p&gt;We have the app running and a celery worker, now it's moment to assign a
decent domain and other minor settings, heroku provides an option called
&lt;a href="https://devcenter.heroku.com/articles/production-check"&gt;Production Check&lt;/a&gt;,
you should use it before going live with your site.&lt;/p&gt;</content><category term="development"></category></entry></feed>